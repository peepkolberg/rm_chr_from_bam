/*
 * -------------------------------------------------
 *  eQTL-Catalogue/glimpse Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  // Workflow flags
  example = 5 // Minimum count of cis variants in cis-distance of gene to be taken into account.
  outdir = './results'
  validate_imputation = true

  // Boilerplate options
  name = false //Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic.
  email = false
  plaintext_email = false
  help = false
  tracedir = "${params.outdir}/pipeline_info/${params.name}"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
  custom_config_version = 'master'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
// includeConfig "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}/nfcore_custom.config"

profiles {
  tartu_hpc { includeConfig 'conf/tartu_hpc.config'}
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/glimpse_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/glimpse_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/glimpse_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/glimpse_dag.svg"
}

manifest {
  name = 'GLIMPSE'
  author = 'Peep Kolberg, Nurlan Kerimov, Kaur Alasoo'
  homePage = ''
  description = 'Genotype imputation with GLIMPSE'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '20.10.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
